---

Parameters:

  BranchName:
    Type: String
    Default: main

  GitHubRepositoryPath:
    Type: String
    Default: tdmalone/codepipeline-samples

  Namespace:
    Type: String
    Default: tim-codepipeline-samples

  ThisTemplateFilename:
    Type: String
    Default: codepipeline-samples.yaml

Resources:

  #######################
  # Pipelines
  #######################

  # Pipeline to deploy other pipelines.
  # GitHub source action (via CodeStar Connections) + CloudFormation deployment action.
  MetaPipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: WaitForIAMResources
    Properties:
      Name: !Sub ${Namespace}-meta-pipeline
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn

      ArtifactStores:
        - Region: !Ref AWS::Region
          ArtifactStore:
            Type: S3
            Location: !Ref ArtifactsBucket

      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn: !Ref CodeStarConnection
                DetectChanges: true
                FullRepositoryId: !Ref GitHubRepositoryPath
                BranchName: !Ref BranchName
              OutputArtifacts:
                - Name: SourceOutput

        - Name: DeployStacks
          Actions:
            - Name: DeployPipelines
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                StackName: !Sub ${Namespace}-pipelines
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt CloudFormationRole.Arn
                TemplatePath: !Sub SourceOutput::${ThisTemplateFilename}
              RunOrder: 1

  # A pipeline that should pretty much pass.
  GoodPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${Namespace}-GOOD-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn

      ArtifactStores:
        - Region: !Ref AWS::Region
          ArtifactStore:
            Type: S3
            Location: !Ref ArtifactsBucket

      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn: !Ref CodeStarConnection
                DetectChanges: true
                FullRepositoryId: !Ref GitHubRepositoryPath
                BranchName: !Ref BranchName
              OutputArtifacts:
                - Name: SourceOutput

        - Name: Build
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref GoodCodeBuildProject
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

  # A pipeline that should pretty much fail.
  BadPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${Namespace}-BAD-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn

      ArtifactStores:
        - Region: !Ref AWS::Region
          ArtifactStore:
            Type: S3
            Location: !Ref ArtifactsBucket

      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn: !Ref CodeStarConnection
                DetectChanges: true
                FullRepositoryId: !Ref GitHubRepositoryPath
                BranchName: !Ref BranchName
              OutputArtifacts:
                - Name: SourceOutput

        - Name: Build
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref BadCodeBuildProject
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

  # A pipeline that gives really flaky results.
  FlakyPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${Namespace}-FLAKY-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn

      ArtifactStores:
        - Region: !Ref AWS::Region
          ArtifactStore:
            Type: S3
            Location: !Ref ArtifactsBucket

      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn: !Ref CodeStarConnection
                DetectChanges: true
                FullRepositoryId: !Ref GitHubRepositoryPath
                BranchName: !Ref BranchName
              OutputArtifacts:
                - Name: SourceOutput

        - Name: Build
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref FlakyCodeBuildProject
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

  # A pipeline that will get stuck waiting on a manual approval action.
  WaitingPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${Namespace}-WAITING-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn

      ArtifactStores:
        - Region: !Ref AWS::Region
          ArtifactStore:
            Type: S3
            Location: !Ref ArtifactsBucket

      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn: !Ref CodeStarConnection
                DetectChanges: true
                FullRepositoryId: !Ref GitHubRepositoryPath
                BranchName: !Ref BranchName
              OutputArtifacts:
                - Name: SourceOutput

        - Name: Approval
          Actions:
            - Name: WaitForApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              RunOrder: 1

  # S3 source action. CodeBuild build action. Lambda invoke action. Cross-region CloudFormation deploy action.
  # AssortedPipeline1:
  #   Type: AWS::CodePipeline::Pipeline
  #   Properties:
  #     Stages:
  #       - Actions:
  #           - ActionTypeId:
  #               Owner:
  #               Category:
  #               Version:
  #               Provider:
  #             Name:
  #         Name:
  #     RoleArn: !GetAtt CodePipelineRole.Arn

  # Step Functions invoke action. Cross-account CloudFormation deploy action.
  # AssortedPipeline2:
  #   Type: AWS::CodePipeline::Pipeline
  #   Properties:
  #     Stages:
  #       - Actions:
  #           - ActionTypeId:
  #               Owner:
  #               Category:
  #               Version:
  #               Provider:
  #             Name:
  #         Name:
  #     RoleArn: !GetAtt CodePipelineRole.Arn

  # S3 deploy action.
  # AssortedPipeline3:
  #   Type: AWS::CodePipeline::Pipeline
  #   Properties:
  #     Stages:
  #       - Actions:
  #           - ActionTypeId:
  #               Owner:
  #               Category:
  #               Version:
  #               Provider:
  #             Name:
  #         Name:
  #     RoleArn: !GetAtt CodePipelineRole.Arn

  # TODO:
  # - CodeDeploy deploy action
  # - ECS deploy action

  #######################
  # Supporting resources
  #######################

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: MainRule
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            ExpirationInDays: 30
            NoncurrentVersionExpiration:
              NoncurrentDays: 30
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  GoodCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${Namespace}-GOOD-project
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:6.0
        ComputeType: BUILD_GENERAL1_SMALL
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            shell: bash
          phases:
            build:
              commands:
                - true
      TimeoutInMinutes: 5

  BadCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${Namespace}-BAD-project
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:6.0
        ComputeType: BUILD_GENERAL1_SMALL
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            shell: bash
          phases:
            build:
              commands:
                - false
      TimeoutInMinutes: 5

  FlakyCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${Namespace}-FLAKY-project
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:6.0
        ComputeType: BUILD_GENERAL1_SMALL
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            shell: bash
          phases:
            build:
              commands:
                - RAND="$((0 + $RANDOM % 2))"  # Returns 0 or 1.
                - if [[ "${RAND}" -eq 1 ]]; then true; else false; fi
      TimeoutInMinutes: 5

  # CodeDeployApplication:
  #   Type: AWS::CodeDeploy::Application
  #   Properties:

  CodeStarConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName: !Sub ${Namespace}-github
      ProviderType: GitHub

  # LambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Code:

  #     Role: !GetAtt LambdaFunctionRole.Arn

  # StateMachine:
  #   Type: AWS::StepFunctions::StateMachine
  #   Properties:
  #     RoleArn: !GetAtt StateMachineRole.Arn

  #######################
  # IAM roles
  #######################

  WaitForIAMResources:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn:
      - CodePipelineRole
      - CloudFormationRole
    Properties:
      Handle: !Ref WaitForIAMResourcesHandle
      Count: 0
      Timeout: 30

  WaitForIAMResourcesHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Namespace}-CloudFormationRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:

              - Effect: Allow
                Action:
                  - codebuild:CreateProject
                  - codebuild:DeleteProject
                  - codebuild:UpdateProject*
                  - codepipeline:CreatePipeline
                  - codepipeline:DeletePipeline
                  - codepipeline:GetPipeline*
                  - codepipeline:StartPipelineExecution
                  - codepipeline:UpdatePipeline
                  - codestar-connections:CreateConnection
                  - codestar-connections:DeleteConnection
                  - codestar-connections:GetConnection
                  - codestar-connections:ListTagsForResource
                  - codestar-connections:PassConnection
                  - iam:AttachRolePolicy
                  - iam:CreatePolicy*
                  - iam:CreateRole*
                  - iam:DeletePolicy*
                  - iam:DeleteRole*
                  - iam:DetachRolePolicy
                  - iam:GetPolicy*
                  - iam:GetRole*
                  - iam:List*
                  - iam:PutRole*
                  - iam:SetDefaultPolicyVersion
                  - iam:UpdateAssumeRolePolicy
                  - iam:UpdateRole
                  - iam:UpdateRoleDescription
                  - s3:CreateBucket
                  - s3:DeleteBucket*
                  - s3:GetLifecycleConfiguration
                  - s3:PutBucket*
                  - s3:PutLifecycleConfiguration
                Resource: '*'

              - Effect: Allow
                Action: iam:PassRole
                Resource:
                  - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Namespace}-CloudFormationRole
                  - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Namespace}-CodeBuildRole
                  - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Namespace}-CodePipelineRole

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Namespace}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:

              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Namespace}-*

              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:${AWS::Partition}:s3:::${ArtifactsBucket}/*

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Namespace}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:

              - Effect: Allow
                Action: codestar-connections:UseConnection
                Resource: !Ref CodeStarConnection

              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: '*'

              - Effect: Allow
                Action: iam:PassRole
                Resource:
                  - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Namespace}-CloudFormationRole
                Condition:
                  StringEquals:
                    iam:PassedToService: cloudformation.amazonaws.com

              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject*
                Resource: !Sub ${ArtifactsBucket.Arn}/*

  # LambdaFunctionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:

  # StateMachineRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
